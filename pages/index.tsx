import { NextPage } from 'next';
import Head from 'next/head'
import { useState, useCallback, useEffect } from 'react';
import {
  Metaplex,
  walletAdapterIdentity,
  CandyMachine,
  Nft,
  DefaultCandyGuardSettings,
  FindNftByMintOutput,
} from "@metaplex-foundation/js";
import { WalletAdapterNetwork } from "@solana/wallet-adapter-base";
import { Connection, PublicKey } from "@solana/web3.js";
import { useWallet } from "@solana/wallet-adapter-react";
import { WalletMultiButton } from "@solana/wallet-adapter-react-ui";

const CANDY_MACHINE_ID = "2GxXbWjkv2N4jjUQVvc8AMsMrozuqSkf8EZVMCitT41M";
const COLLECTION_ADDRESS = "5FusHaKEKjfKsmQwXNrhFcFABGGxu7iYCdbvyVSRe3Ri";

export const RPC_URL =
  (process.env.NEXT_PUBLIC_RPC_URL as string) || "https://rpc.ankr.com/solana";


const connection = new Connection(RPC_URL);

enum Holder {
  Yay,
  Nay,
}

const Home: NextPage = () => {
  const [network, setNetwork] = useState(WalletAdapterNetwork.Mainnet);
  const [loading, setLoading] = useState(true);
  const { publicKey } = useWallet();
  // console.log(publicKey?.toString());
  const [candymachine, setCandymachine] = useState<CandyMachine<DefaultCandyGuardSettings>>();
  const [holder, setHolder] = useState<Holder>(Holder.Nay);

  useEffect(() => {
    setTimeout(() => {
      setLoading(false);
    }, 1000);
  });

  const getCandyMachine = useCallback(async () => {
    const metaplex = new Metaplex(connection);
    const candyMachineAddress = new PublicKey(CANDY_MACHINE_ID);
    // const user = await metaplex.identity().publicKey;
    // console.log(user.toString());
    const candyMachine = await metaplex
      .candyMachines()
      .findByAddress({ address: candyMachineAddress })
      .then((res) => {
        if (res) {
          setCandymachine(res);
          return res;
        }
      });
    if (publicKey) {
      const myNFTs = await metaplex.nfts().findAllByOwner({
        owner: new PublicKey(publicKey)
      });

      console.log(myNFTs);
      myNFTs.forEach(nft => {
        console.log(nft.address.toString());
        if (nft.collection) {
          console.log("collection address :", nft.collection.address.toString());
          if (nft.collection.address.toString() == COLLECTION_ADDRESS) {
            setHolder(Holder.Yay);
          }
        }
        console.log(nft.address.toString());
      })
    }
    // console.log(myNFTs);
    console.log(candyMachine);
    return candyMachine;
  }, [connection, publicKey]);

  useEffect(() => {
    setTimeout(getCandyMachine, 1000);
  }, [publicKey]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='h-screen w-screen flex flex-col justify-center items-center'>
        <h1 className="text-3xl font-bold underline">Hello World</h1>
        {!loading && <WalletMultiButton />}
        {holder === Holder.Yay ? 'You are a holder!' : 'You are not a holder :('}
      </main>
    </>
  )
}

export default Home;
